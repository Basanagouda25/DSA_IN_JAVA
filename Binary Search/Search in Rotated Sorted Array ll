class Solution {
    public int findpivot(int[] nums,int l,int r){
        while(l < r && nums[l] == nums[l+1]){
            l++;
        }
        while(l < r && nums[r] == nums[r-1]){
            r--;
        }
        while(l < r){
            int mid = l + (r-l)/2;
            if(nums[mid] > nums[r]){
                l = mid + 1;
            }else{
                r = mid;
            }
        }
        return r;
    }
    public boolean binary(int[] nums,int l,int r,int target){
        while(l <= r){
            int mid = l + (r-l)/2;
            if(nums[mid] == target){
                return true;
            }else if(nums[mid] < target){
                l = mid + 1;
            }else{
                r = mid - 1;
            }
        }
        return false;
    }
    public boolean search(int[] nums, int target) {
        int n = nums.length;
        int pivot = findpivot(nums,0,n-1);
        if(binary(nums,0,pivot-1,target)){
            return true;
        }
        return binary(nums,pivot,n-1,target);
    }
}
